name: CI/CD Pipeline

on:
  pull_request:
    branches: [ "develop", "main" ]
  push:
    branches: [ "main" ]

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Definir variáveis de ambiente para testes
        run: |
          echo "MAIL_HOST=${{ secrets.MAIL_HOST }}" >> $GITHUB_ENV
          echo "MAIL_PORT=${{ secrets.MAIL_PORT }}" >> $GITHUB_ENV
          echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> $GITHUB_ENV
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> $GITHUB_ENV

      - name: Build and run tests
        run: mvn clean test -Dspring.profiles.active=test

  deploy:
    needs: build_and_test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/main')

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build .jar (sem rodar testes de novo)
        run: mvn clean package -DskipTests

      - name: Login no GitHub Container Registry (GHCR)
        run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Construir e enviar a imagem para GHCR
        run: |
          docker build -t ghcr.io/psicowise/psicowise-backend:latest .
          docker push ghcr.io/psicowise/psicowise-backend:latest

      - name: Login no Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin


      - name: Construir e enviar a imagem para Docker Hub
        run: |
          docker build -t raphaelduartess/psicowise-backend:latest .
          docker push raphaelduartess/psicowise-backend:latest
      

      - name: Deploy na VPS via Webhook com limpeza
        run: |
          # Adicionar comando para remover container antigo
          curl -X POST "${{ secrets.EASYPANEL_REMOVE_CONTAINER_URL }}" || true

          # Então fazer o deploy normal
          curl -X POST "${{ secrets.EASYPANEL_DEPLOY_URL }}"